;; Image texel fetches with `IndexBoundsCheckPolicy::Restrict`.
;; Validates in Vulkan 1.2 environment

                        OpCapability Shader
                        OpCapability ImageQuery
             %glsl450 = OpExtInstImport "GLSL.std.450"
                        OpMemoryModel Logical GLSL450

                        OpEntryPoint Fragment %fragment "fragment" %input_coords %input_index %input_lod
                                              %var_source %var_arr_source %var_ssource %var_arr_ssource
                                              %output
                        OpExecutionMode %fragment OriginUpperLeft

                        ;; Required decorations for uniform images
                        OpDecorate %var_source DescriptorSet 0
                        OpDecorate %var_source Binding 0
                        OpDecorate %var_arr_source DescriptorSet 0
                        OpDecorate %var_arr_source Binding 0
                        OpDecorate %var_ssource DescriptorSet 0
                        OpDecorate %var_ssource Binding 0
                        OpDecorate %var_arr_ssource DescriptorSet 0
                        OpDecorate %var_arr_ssource Binding 0

                        ;; Required decorations for interface variables
                        OpDecorate %input_coords Location 0
                        OpDecorate %input_index Location 1
                        OpDecorate %input_lod Location 2
                        OpDecorate %output Location 0

                %void = OpTypeVoid
                %bool = OpTypeBool
                 %int = OpTypeInt 32 1
                 %f32 = OpTypeFloat 32

              %v2_int = OpTypeVector %int 2
              %v3_int = OpTypeVector %int 3
              %v4_f32 = OpTypeVector %f32 4

          %ptr_in_int = OpTypePointer Input %int
       %ptr_in_v2_int = OpTypePointer Input %v2_int
      %ptr_out_v4_f32 = OpTypePointer Output %v4_f32

         %v4_f32_zero = OpConstantNull %v4_f32

                 %one = OpConstant %int 1
              %v2_one = OpConstantComposite %v2_int %one %one
              %v3_one = OpConstantComposite %v3_int %one %one %one

                        ;; Inputs and outputs for %fragment entry point
        %input_coords = OpVariable %ptr_in_v2_int Input
         %input_index = OpVariable %ptr_in_int Input
           %input_lod = OpVariable %ptr_in_int Input
              %output = OpVariable %ptr_out_v4_f32 Output %v4_f32_zero

                        ;; A storage image.
            %image_2d = OpTypeImage %f32 2D 0 0 0 2 Rgba32f
        %ptr_image_2d = OpTypePointer UniformConstant %image_2d
          %var_source = OpVariable %ptr_image_2d UniformConstant

                        ;; An arrayed storage image.
        %image_arr_2d = OpTypeImage %f32 2D 0 1 0 2 Rgba32f
    %ptr_image_arr_2d = OpTypePointer UniformConstant %image_arr_2d
      %var_arr_source = OpVariable %ptr_image_arr_2d UniformConstant

                        ;; A sampled image.
           %simage_2d = OpTypeImage %f32 2D 0 0 0 1 Rgba32f
       %ptr_simage_2d = OpTypePointer UniformConstant %simage_2d
         %var_ssource = OpVariable %ptr_simage_2d UniformConstant

                        ;; An arrayed sampled image.
       %simage_arr_2d = OpTypeImage %f32 2D 0 1 0 1 Rgba32f
   %ptr_simage_arr_2d = OpTypePointer UniformConstant %simage_arr_2d
     %var_arr_ssource = OpVariable %ptr_simage_arr_2d UniformConstant

       %fragment_type = OpTypeFunction %void

          %fetch_type = OpTypeFunction %v4_f32 %v2_int %int %int

               %fetch = OpFunction %v4_f32 None %fetch_type
              %coords = OpFunctionParameter %v2_int
               %index = OpFunctionParameter %int
                 %lod = OpFunctionParameter %int

            %ob_label = OpLabel
              %source = OpLoad %image_2d %var_source
          %arr_source = OpLoad %image_arr_2d %var_arr_source
             %ssource = OpLoad %simage_2d %var_ssource
         %arr_ssource = OpLoad %simage_arr_2d %var_arr_ssource

;; No level of detail or array index.
             %bounds1 = OpImageQuerySize %v2_int %source
              %limit1 = OpISub %v2_int %bounds1 %v2_one
     %clamped_coords1 = OpExtInst %v2_int %glsl450 UMin %coords %limit1
              %texel1 = OpImageRead %v4_f32 %source %clamped_coords1

;; Level of detail.
             %levels2 = OpImageQueryLevels %int %ssource
        %level_limit2 = OpISub %int %levels2 %one
        %clamped_lod2 = OpExtInst %int %glsl450 UMin %lod %level_limit2

             %bounds2 = OpImageQuerySizeLod %v2_int %ssource %clamped_lod2
              %limit2 = OpISub %v2_int %bounds2 %v2_one
     %clamped_coords2 = OpExtInst %v2_int %glsl450 UMin %coords %limit2
              %texel2 = OpImageFetch %v4_f32 %ssource %clamped_coords2 Lod %clamped_lod2

;; Array index.
             %bounds3 = OpImageQuerySize %v3_int %arr_source
              %limit3 = OpISub %v3_int %bounds3 %v3_one

           %coords_x3 = OpCompositeExtract %int %coords 0
           %coords_y3 = OpCompositeExtract %int %coords 1
           %combined3 = OpCompositeConstruct %v3_int %coords_x3 %coords_y3 %index
     %clamped_coords3 = OpExtInst %v3_int %glsl450 UMin %combined3 %limit3
              %texel3 = OpImageRead %v4_f32 %source %clamped_coords3

;; Array index and level of detail.
             %levels4 = OpImageQueryLevels %int %arr_ssource
        %level_limit4 = OpISub %int %levels4 %one
        %clamped_lod4 = OpExtInst %int %glsl450 UMin %lod %level_limit4

           %coords_x4 = OpCompositeExtract %int %coords 0
           %coords_y4 = OpCompositeExtract %int %coords 1
           %combined4 = OpCompositeConstruct %v3_int %coords_x4 %coords_y4 %index

             %bounds4 = OpImageQuerySizeLod %v3_int %arr_ssource %clamped_lod4
              %limit4 = OpISub %v3_int %bounds4 %v3_one
     %clamped_coords4 = OpExtInst %v3_int %glsl450 UMin %combined4 %limit4
              %texel4 = OpImageFetch %v4_f32 %arr_ssource %clamped_coords4 Lod %clamped_lod4

             %result2 = OpFAdd %v4_f32 %texel1 %texel2
             %result3 = OpFAdd %v4_f32 %result2 %texel3
             %result4 = OpFAdd %v4_f32 %result3 %texel4
                        OpReturnValue %result4
                        OpFunctionEnd

                        ;; Entry point.
            %fragment = OpFunction %void None %fragment_type

           %ob_labelf = OpLabel
             %fcoords = OpLoad %v2_int %input_coords
              %findex = OpLoad %int %input_index
                %flod = OpLoad %int %input_lod
             %fresult = OpFunctionCall %v4_f32 %fetch %fcoords %findex %flod
                        OpStore %output %fresult
                        OpReturn
                        OpFunctionEnd
