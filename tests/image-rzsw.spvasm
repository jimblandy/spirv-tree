;; Image texel fetches with `IndexBoundsCheckPolicy::ReadZeroSkipWrite`.

                        OpCapability Shader
                        OpCapability ImageQuery
             %glsl450 = OpExtInstImport "GLSL.std.450"
                        OpMemoryModel Logical GLSL450

                        OpEntryPoint Fragment %fragment "fragment" %input_coords %input_index %input_lod %output
                        OpExecutionMode %fragment OriginUpperLeft

                %void = OpTypeVoid
                %bool = OpTypeBool
                 %int = OpTypeInt 32 1
                 %f32 = OpTypeFloat 32

             %v2_bool = OpTypeVector %bool 2
              %v2_int = OpTypeVector %int 2
              %v3_int = OpTypeVector %int 3
              %v4_f32 = OpTypeVector %f32 4

          %ptr_in_int = OpTypePointer Input %int
       %ptr_in_v2_int = OpTypePointer Input %v2_int
      %ptr_out_v4_f32 = OpTypePointer Output %v4_f32

            %f32_zero = OpConstantNull %f32
         %v4_f32_zero = OpConstantNull %v4_f32

                 %one = OpConstant %int 1
              %v2_one = OpConstantComposite %v2_int %one %one
              %v3_one = OpConstantComposite %v3_int %one %one %one

                        ;; Inputs and outputs for %fragment entry point
        %input_coords = OpVariable %ptr_in_v2_int Input
         %input_index = OpVariable %ptr_in_int Input
           %input_lod = OpVariable %ptr_in_int Input
              %output = OpVariable %ptr_out_v4_f32 Output %v4_f32_zero

                        ;; A storage image.
            %image_2d = OpTypeImage %f32 2D 0 0 0 0 Rgba32f
        %ptr_image_2d = OpTypePointer UniformConstant %image_2d
          %var_source = OpVariable %ptr_image_2d UniformConstant

                        ;; An arrayed storage image.
        %image_arr_2d = OpTypeImage %f32 2D 0 1 0 0 Rgba32f
    %ptr_image_arr_2d = OpTypePointer UniformConstant %image_arr_2d
      %var_arr_source = OpVariable %ptr_image_arr_2d UniformConstant

                        ;; A sampled image.
           %simage_2d = OpTypeImage %f32 2D 0 0 0 1 Rgba32f
       %ptr_simage_2d = OpTypePointer UniformConstant %simage_2d
         %var_ssource = OpVariable %ptr_simage_2d UniformConstant

                        ;; An arrayed sampled image.
       %simage_arr_2d = OpTypeImage %f32 2D 0 1 0 1 Rgba32f
   %ptr_simage_arr_2d = OpTypePointer UniformConstant %simage_arr_2d
     %var_arr_ssource = OpVariable %ptr_simage_arr_2d UniformConstant

       %fragment_type = OpTypeFunction %void

          %fetch_type = OpTypeFunction %v4_f32 %v2_int %int %int

               %fetch = OpFunction %v4_f32 None %fetch_type
              %coords = OpFunctionParameter %v2_int
               %index = OpFunctionParameter %int
                 %lod = OpFunctionParameter %int

            %ob_label = OpLabel
              %source = OpLoad %image_2d %var_source
          %arr_source = OpLoad %image_arr_2d %var_arr_source
             %ssource = OpLoad %simage_2d %var_ssource

;; No level of detail or array index.
             %bounds1 = OpImageQuerySize %v2_int %source
       %coords_conds1 = OpULessThan %v2_bool %coords %bounds1
        %coords_cond1 = OpAll %bool %coords_conds1
                        OpSelectionMerge %merge1 None
                        OpBranchConditional %coords_cond1 %read1 %merge1

               %read1 = OpLabel
         %real_texel1 = OpImageRead %f32 %source %coords
                        OpBranch %merge1

              %merge1 = OpLabel
              %texel1 = OpPhi %f32 %real_texel1 %read1 %f32_zero %ob_label

;; Level of detail, no array index
             %levels2 = OpImageQueryLevels %int %ssource
           %lod_cond2 = OpULessThan %bool %lod %levels2
                        OpSelectionMerge %merge2 None
                        OpBranchConditional %lod_cond2 %check_coords2 %merge2

       %check_coords2 = OpLabel
             %bounds2 = OpImageQuerySizeLod %v2_int %ssource %lod
       %coords_conds2 = OpULessThan %v2_bool %coords %bounds2
        %coords_cond2 = OpAll %bool %coords_conds2
                        OpBranchConditional %coords_cond2 %read2 %merge2

               %read2 = OpLabel
         %real_texel2 = OpImageFetch %v4_f32 %ssource %coords Lod %lod
                        OpBranch %merge2

              %merge2 = OpLabel
              %texel2 = OpPhi %v4_f32 %real_texel2 %read2 %v4_f32_zero %check_coords2 %v4_f32_zero %merge1

                        OpReturnValue %texel2
                        OpFunctionEnd

                        ;; Entry point.
            %fragment = OpFunction %void None %fragment_type

           %ob_labelf = OpLabel
             %fcoords = OpLoad %v2_int %input_coords
              %findex = OpLoad %int %input_index
                %flod = OpLoad %int %input_lod
             %fresult = OpFunctionCall %v4_f32 %fetch %fcoords %findex %flod
                        OpStore %output %fresult
                        OpReturn
                        OpFunctionEnd
